---
import { Calendar, Beaker, Star, Clock } from 'lucide-astro';

interface ImportantDate {
  event: string;
  date: string;
  type: 'lab' | 'milestone';
}

interface Props {
  dates: ImportantDate[];
}

const { dates = [] } = Astro.props;

function getRelativeTimeString(date: Date): string {
  const now = new Date();
  const diffTime = date.getTime() - now.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  
  if (diffDays < 0) return 'Pasado';
  if (diffDays === 0) return 'Hoy';
  if (diffDays === 1) return 'Mañana';
  if (diffDays < 7) return `En ${diffDays} días`;
  if (diffDays < 30) {
    const weeks = Math.floor(diffDays / 7);
    return `En ${weeks} ${weeks === 1 ? 'semana' : 'semanas'}`;
  }
  const months = Math.floor(diffDays / 30);
  return `En ${months} ${months === 1 ? 'mes' : 'meses'}`;
}

const sortedDates = [...dates].sort(
  (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()
);
---

<section class="prose dark:prose-invert max-w-none">
  <div class="px-6 py-8">
    <h2 class="text-xl font-semibold mt-0 mb-0 flex items-center gap-2">
      <Calendar class="w-5 h-5 text-gray-400" />
      Fechas Importantes
    </h2>
    
    <div class="flow-root">
      {sortedDates.length === 0 ? (
        <p class="text-sm flex items-center gap-2 mt-0">
          <Clock class="w-4 h-4 text-gray-400" />
          No hay fechas importantes programadas.
        </p>
      ) : (
        <ul class="list-none -mb-8">
          {sortedDates.map((date, idx) => (
            <li>
              <div class="relative pb-4">
                {idx !== sortedDates.length - 1 && (
                  <span
                    class="absolute left-4 top-4 -ml-px h-full w-0.5 bg-gray-200 dark:bg-gray-700"
                    aria-hidden="true"
                  />
                )}
                <div class="relative flex gap-3">
                  <div>
                    <span class="h-8 w-8 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center">
                      {date.type === 'lab' ? (
                        <Beaker class="h-4 w-4 text-gray-600 dark:text-gray-400" />
                      ) : (
                        <Star class="h-4 w-4 text-gray-600 dark:text-gray-400" />
                      )}
                    </span>
                  </div>
                  <div class="flex min-w-0 flex-1 justify-between gap-4">
                    <div>
                      <p class="text-sm font-medium mt-1 mb-1">
                        {date.event}
                      </p>
                      <p class="text-sm mb-2 text-gray-500 dark:text-gray-400 mt-0">
                        {new Date(date.date).toLocaleDateString('es-PE', {
                          weekday: 'long',
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric'
                        })}
                      </p>
                    <div class="mt-0 whitespace-nowrap text-xs text-gray-500 dark:text-gray-400 flex items-center gap-1">
                      <Clock class="w-3 h-3" />
                      {getRelativeTimeString(new Date(date.date))}
                    </div>
                    </div>
                  </div>
                </div>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  </div>
</section>
